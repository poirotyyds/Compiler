@MININT = dso_local global i32 -2147483647
@MINCHAR = dso_local global i8 32
@ZERO_TO_TEN = dso_local constant [11 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10]
@NO_USE1 = dso_local constant [11 x i32] [i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0]
@NO_USE2 = dso_local constant [11 x i32] [i32 0, i32 1, i32 2, i32 3, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0]
@ABCDEFGHIJ = dso_local constant [11 x i8] [i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 72, i8 73, i8 74, i8 0]
@NO_USE3 = dso_local constant [11 x i8] [i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0]
@NO_USE4 = dso_local constant [11 x i8] c"NO_USE4\00\00\00\00", align 1
@fibonacci = dso_local global [15 x i32] zeroinitializer
@.str = private unnamed_addr constant [17 x i8] c"Fibonacci Array \00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c" : \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c" : \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c" : \00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"22371298\0A\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"a\0A\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"a\0A\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"a\0A\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"a\0A\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"a\0A\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"a\0A\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"a\0A\00", align 1

declare dso_local i32 @getint() 
declare dso_local i8 @getchar() 
declare dso_local void @putint(i32) 
declare dso_local void @putch(i32) 
declare dso_local void @putstr(i8*) 

define dso_local void @cal_fibonacci() {
0:
	%1 = getelementptr inbounds [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 1
	store i32 1, i32* %1
	%2 = alloca i32
	store i32 2, i32* %2
	br label %3
3:
	%4 = load i32, i32* %2
	%5 = icmp slt i32 %4, 15
	%6 = icmp ne i1 %5, 0
	br i1 %6, label %10, label %22
7:
	%8 = load i32, i32* %2
	%9 = add i32 %8, 1
	store i32 %9, i32* %2
	br label %3
10:
	%11 = load i32, i32* %2
	%12 = getelementptr inbounds [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %11
	%13 = load i32, i32* %2
	%14 = sub i32 %13, 1
	%15 = getelementptr inbounds [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %14
	%16 = load i32, i32* %15
	%17 = load i32, i32* %2
	%18 = sub i32 %17, 2
	%19 = getelementptr inbounds [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %18
	%20 = load i32, i32* %19
	%21 = add i32 %16, %20
	store i32 %21, i32* %12
	br label %7
22:
	ret void
}

define dso_local void @print_fibonacci_n(i32 %0, i32 %1, i32 %2) {
3:
	%4 = alloca i32
	store i32 %0, i32* %4
	%5 = alloca i32
	store i32 %1, i32* %5
	%6 = alloca i32
	store i32 %2, i32* %6
	%7 = load i32, i32* %4
	%8 = load i32, i32* %4
	%9 = getelementptr inbounds [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %8
	%10 = load i32, i32* %9
	%11 = load i32, i32* %5
	%12 = load i32, i32* %5
	%13 = getelementptr inbounds [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %12
	%14 = load i32, i32* %13
	%15 = load i32, i32* %6
	%16 = load i32, i32* %6
	%17 = getelementptr inbounds [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %16
	%18 = load i32, i32* %17
	%19 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i32 0, i32 0
	call void @putstr(i8* %19)
	call void @putint(i32 %7)
	%20 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.1, i32 0, i32 0
	call void @putstr(i8* %20)
	call void @putint(i32 %10)
	%21 = getelementptr inbounds [3 x i8], [3 x i8]* @.str.2, i32 0, i32 0
	call void @putstr(i8* %21)
	call void @putint(i32 %11)
	%22 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.3, i32 0, i32 0
	call void @putstr(i8* %22)
	call void @putint(i32 %14)
	%23 = getelementptr inbounds [3 x i8], [3 x i8]* @.str.4, i32 0, i32 0
	call void @putstr(i8* %23)
	call void @putint(i32 %15)
	%24 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.5, i32 0, i32 0
	call void @putstr(i8* %24)
	call void @putint(i32 %18)
	%25 = getelementptr inbounds [2 x i8], [2 x i8]* @.str.6, i32 0, i32 0
	call void @putstr(i8* %25)
	ret void
}

define dso_local i32 @main() {
0:
	%1 = getelementptr inbounds [10 x i8], [10 x i8]* @.str.7, i32 0, i32 0
	call void @putstr(i8* %1)
	%2 = alloca i32
	%3 = call i32 @getint()
	store i32 %3, i32* %2
	%4 = alloca i32
	%5 = call i32 @getint()
	store i32 %5, i32* %4
	%6 = alloca i32
	%7 = call i32 @getint()
	store i32 %7, i32* %6
	call void @cal_fibonacci()
	%8 = load i32, i32* %2
	%9 = icmp sgt i32 %8, 14
	%10 = icmp ne i1 %9, 0
	br i1 %10, label %11, label %22
11:
	br label %16
12:
	%13 = load i32, i32* %2
	%14 = load i32, i32* %4
	%15 = load i32, i32* %6
	call void @print_fibonacci_n(i32 %13, i32 %14, i32 %15)
	br label %16
16:
	%17 = alloca i32
	store i32 2147483647, i32* %17
	%18 = alloca i32
	%19 = getelementptr inbounds [11 x i32], [11 x i32]* @ZERO_TO_TEN, i32 0, i32 10
	%20 = load i32, i32* %19
	store i32 %20, i32* %18
	%21 = alloca i32
	store i32 1, i32* %21
	br label %30
22:
	%23 = load i32, i32* %4
	%24 = icmp sgt i32 %23, 14
	%25 = icmp ne i1 %24, 0
	br i1 %25, label %11, label %26
26:
	%27 = load i32, i32* %6
	%28 = icmp sgt i32 %27, 14
	%29 = icmp ne i1 %28, 0
	br i1 %29, label %11, label %12
30:
	%31 = load i32, i32* %21
	%32 = icmp slt i32 %31, 2
	%33 = icmp ne i1 %32, 0
	br i1 %33, label %37, label %40
34:
	%35 = load i32, i32* %21
	%36 = add i32 %35, 1
	store i32 %36, i32* %21
	br label %30
37:
	%38 = load i32, i32* %21
	call void @putint(i32 %38)
	%39 = getelementptr inbounds [2 x i8], [2 x i8]* @.str.8, i32 0, i32 0
	call void @putstr(i8* %39)
	br label %34
40:
	store i32 2, i32* %21
	br label %44
41:
	%42 = load i32, i32* %21
	%43 = add i32 %42, 1
	store i32 %43, i32* %21
	br label %44
44:
	%45 = load i32, i32* %21
	%46 = icmp eq i32 %45, 5
	%47 = icmp ne i1 %46, 0
	br i1 %47, label %49, label %51
48:
	store i32 2, i32* %21
	br label %67
49:
	br label %48
50:
	br label %41
51:
	%52 = load i32, i32* %21
	%53 = icmp sle i32 %52, 6
	%54 = icmp ne i1 %53, 0
	br i1 %54, label %49, label %55
55:
	%56 = load i32, i32* %21
	%57 = icmp sge i32 %56, 90
	%58 = icmp ne i1 %57, 0
	br i1 %58, label %49, label %59
59:
	%60 = load i32, i32* %21
	%61 = icmp eq i32 %60, 100
	%62 = icmp ne i1 %61, 0
	br i1 %62, label %49, label %63
63:
	%64 = load i32, i32* %21
	%65 = icmp ne i32 %64, 80
	%66 = icmp ne i1 %65, 0
	br i1 %66, label %49, label %50
67:
	%68 = load i32, i32* %21
	%69 = icmp sle i32 %68, 5
	%70 = icmp ne i1 %69, 0
	br i1 %70, label %71, label %75
71:
	%72 = load i32, i32* %21
	%73 = icmp ne i32 %72, 90
	%74 = icmp ne i1 %73, 0
	br i1 %74, label %76, label %77
75:
	store i32 100, i32* %21
	br label %81
76:
	br label %75
77:
	br label %67
78:
	%79 = load i32, i32* %21
	%80 = add i32 %79, 1
	store i32 %80, i32* %21
	br label %81
81:
	%82 = load i32, i32* %21
	%83 = icmp sgt i32 %82, 10
	%84 = icmp ne i1 %83, 0
	br i1 %84, label %86, label %87
85:
	br label %88
86:
	br label %85
87:
	br label %78
88:
	%89 = load i32, i32* %21
	%90 = icmp sgt i32 %89, 50
	%91 = icmp ne i1 %90, 0
	br i1 %91, label %92, label %96
92:
	%93 = load i32, i32* %21
	%94 = icmp sgt i32 %93, 80
	%95 = icmp ne i1 %94, 0
	br i1 %95, label %104, label %100
96:
	store i32 100, i32* %21
	br label %108
97:
	br label %96
98:
	br label %88
99:
	br label %88
100:
	%101 = load i32, i32* %21
	%102 = icmp eq i32 %101, 100
	%103 = icmp ne i1 %102, 0
	br i1 %103, label %97, label %98
104:
	%105 = load i32, i32* %21
	%106 = icmp slt i32 %105, 120
	%107 = icmp ne i1 %106, 0
	br i1 %107, label %97, label %100
108:
	%109 = load i32, i32* %21
	%110 = icmp eq i32 %109, 100
	%111 = icmp ne i1 %110, 0
	br i1 %111, label %113, label %114
112:
	br label %116
113:
	br label %112
114:
	br label %108
115:
	br label %108
116:
	%117 = icmp ne i32 1, 0
	%118 = icmp ne i1 %117, 0
	br i1 %118, label %129, label %130
119:
	%120 = alloca i8
	%121 = call i8 @getchar()
	store i8 %121, i8* %120
	%122 = getelementptr inbounds [3 x i8], [3 x i8]* @.str.9, i32 0, i32 0
	call void @putstr(i8* %122)
	%123 = getelementptr inbounds [3 x i8], [3 x i8]* @.str.10, i32 0, i32 0
	call void @putstr(i8* %123)
	%124 = getelementptr inbounds [3 x i8], [3 x i8]* @.str.11, i32 0, i32 0
	call void @putstr(i8* %124)
	%125 = getelementptr inbounds [3 x i8], [3 x i8]* @.str.12, i32 0, i32 0
	call void @putstr(i8* %125)
	%126 = getelementptr inbounds [3 x i8], [3 x i8]* @.str.13, i32 0, i32 0
	call void @putstr(i8* %126)
	%127 = getelementptr inbounds [3 x i8], [3 x i8]* @.str.14, i32 0, i32 0
	call void @putstr(i8* %127)
	%128 = getelementptr inbounds [3 x i8], [3 x i8]* @.str.15, i32 0, i32 0
	call void @putstr(i8* %128)
	ret i32 0
129:
	br label %119
130:
	br label %116
}
